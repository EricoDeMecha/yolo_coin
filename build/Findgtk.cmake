########## MACROS ###########################################################################
#############################################################################################

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAME ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAME ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                string(REGEX REPLACE "[^A-Za-z0-9.+_-]" "_" _LIBRARY_NAME ${_LIBRARY_NAME})
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


########### FOUND PACKAGE ###################################################################
#############################################################################################

include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated Findgtk.cmake")
set(gtk_FOUND 1)
set(gtk_VERSION "system")

find_package_handle_standard_args(gtk REQUIRED_VARS
                                  gtk_VERSION VERSION_VAR gtk_VERSION)
mark_as_advanced(gtk_FOUND gtk_VERSION)

set(gtk_COMPONENTS gtk::gtk+-2.0)

if(gtk_FIND_COMPONENTS)
    foreach(_FIND_COMPONENT ${gtk_FIND_COMPONENTS})
        list(FIND gtk_COMPONENTS "gtk::${_FIND_COMPONENT}" _index)
        if(${_index} EQUAL -1)
            conan_message(FATAL_ERROR "Conan: Component '${_FIND_COMPONENT}' NOT found in package 'gtk'")
        else()
            conan_message(STATUS "Conan: Component '${_FIND_COMPONENT}' found in package 'gtk'")
        endif()
    endforeach()
endif()

########### VARIABLES #######################################################################
#############################################################################################


set(gtk_INCLUDE_DIRS "/usr/include/gtk-2.0"
			"/usr/lib/x86_64-linux-gnu/gtk-2.0/include"
			"/usr/include/pango-1.0"
			"/usr/include/atk-1.0"
			"/usr/include/gdk-pixbuf-2.0"
			"/usr/include/libmount"
			"/usr/include/blkid"
			"/usr/include/pango-1.0"
			"/usr/include/fribidi"
			"/usr/include/cairo"
			"/usr/include/pixman-1"
			"/usr/include/harfbuzz"
			"/usr/include/glib-2.0"
			"/usr/lib/x86_64-linux-gnu/glib-2.0/include"
			"/usr/include/uuid"
			"/usr/include/freetype2"
			"/usr/include/libpng16")
set(gtk_INCLUDE_DIR "/usr/include/gtk-2.0;/usr/lib/x86_64-linux-gnu/gtk-2.0/include;/usr/include/pango-1.0;/usr/include/atk-1.0;/usr/include/gdk-pixbuf-2.0;/usr/include/libmount;/usr/include/blkid;/usr/include/pango-1.0;/usr/include/fribidi;/usr/include/cairo;/usr/include/pixman-1;/usr/include/harfbuzz;/usr/include/glib-2.0;/usr/lib/x86_64-linux-gnu/glib-2.0/include;/usr/include/uuid;/usr/include/freetype2;/usr/include/libpng16")
set(gtk_INCLUDES "/usr/include/gtk-2.0"
			"/usr/lib/x86_64-linux-gnu/gtk-2.0/include"
			"/usr/include/pango-1.0"
			"/usr/include/atk-1.0"
			"/usr/include/gdk-pixbuf-2.0"
			"/usr/include/libmount"
			"/usr/include/blkid"
			"/usr/include/pango-1.0"
			"/usr/include/fribidi"
			"/usr/include/cairo"
			"/usr/include/pixman-1"
			"/usr/include/harfbuzz"
			"/usr/include/glib-2.0"
			"/usr/lib/x86_64-linux-gnu/glib-2.0/include"
			"/usr/include/uuid"
			"/usr/include/freetype2"
			"/usr/include/libpng16")
set(gtk_RES_DIRS )
set(gtk_DEFINITIONS )
set(gtk_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(gtk_COMPILE_DEFINITIONS )
set(gtk_COMPILE_OPTIONS_LIST "-pthread" "-pthread")
set(gtk_COMPILE_OPTIONS_C "-pthread")
set(gtk_COMPILE_OPTIONS_CXX "-pthread")
set(gtk_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(gtk_LIBRARIES "") # Will be filled later
set(gtk_LIBS "") # Same as gtk_LIBRARIES
set(gtk_SYSTEM_LIBS gtk-x11-2.0 gdk-x11-2.0 pangocairo-1.0 atk-1.0 cairo gdk_pixbuf-2.0 gio-2.0 pangoft2-1.0 pango-1.0 gobject-2.0 glib-2.0 harfbuzz fontconfig freetype)
set(gtk_FRAMEWORK_DIRS )
set(gtk_FRAMEWORKS )
set(gtk_FRAMEWORKS_FOUND "") # Will be filled later
set(gtk_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(gtk_FRAMEWORKS_FOUND "${gtk_FRAMEWORKS}" "${gtk_FRAMEWORK_DIRS}")

mark_as_advanced(gtk_INCLUDE_DIRS
                 gtk_INCLUDE_DIR
                 gtk_INCLUDES
                 gtk_DEFINITIONS
                 gtk_LINKER_FLAGS_LIST
                 gtk_COMPILE_DEFINITIONS
                 gtk_COMPILE_OPTIONS_LIST
                 gtk_LIBRARIES
                 gtk_LIBS
                 gtk_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to gtk_LIBS and gtk_LIBRARY_LIST
set(gtk_LIBRARY_LIST )
set(gtk_LIB_DIRS )

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_gtk_DEPENDENCIES "${gtk_FRAMEWORKS_FOUND} ${gtk_SYSTEM_LIBS} ")

conan_package_library_targets("${gtk_LIBRARY_LIST}"  # libraries
                              "${gtk_LIB_DIRS}"      # package_libdir
                              "${_gtk_DEPENDENCIES}"  # deps
                              gtk_LIBRARIES            # out_libraries
                              gtk_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "gtk")                                      # package_name

set(gtk_LIBS ${gtk_LIBRARIES})

foreach(_FRAMEWORK ${gtk_FRAMEWORKS_FOUND})
    list(APPEND gtk_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND gtk_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${gtk_SYSTEM_LIBS})
    list(APPEND gtk_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND gtk_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(gtk_LIBRARIES_TARGETS "${gtk_LIBRARIES_TARGETS};")
set(gtk_LIBRARIES "${gtk_LIBRARIES};")

set(CMAKE_MODULE_PATH "/home/erico/.conan/data/gtk/system/_/_/package/cc5e5ca8b619d2dffaaeae1e4924ae3ce085a8f1/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/erico/.conan/data/gtk/system/_/_/package/cc5e5ca8b619d2dffaaeae1e4924ae3ce085a8f1/" ${CMAKE_PREFIX_PATH})


########### COMPONENT gtk+-2.0 VARIABLES #############################################

set(gtk_gtk+-2.0_INCLUDE_DIRS "/usr/include/gtk-2.0"
			"/usr/lib/x86_64-linux-gnu/gtk-2.0/include"
			"/usr/include/pango-1.0"
			"/usr/include/atk-1.0"
			"/usr/include/gdk-pixbuf-2.0"
			"/usr/include/libmount"
			"/usr/include/blkid"
			"/usr/include/pango-1.0"
			"/usr/include/fribidi"
			"/usr/include/cairo"
			"/usr/include/pixman-1"
			"/usr/include/harfbuzz"
			"/usr/include/glib-2.0"
			"/usr/lib/x86_64-linux-gnu/glib-2.0/include"
			"/usr/include/uuid"
			"/usr/include/freetype2"
			"/usr/include/libpng16")
set(gtk_gtk+-2.0_INCLUDE_DIR "/usr/include/gtk-2.0;/usr/lib/x86_64-linux-gnu/gtk-2.0/include;/usr/include/pango-1.0;/usr/include/atk-1.0;/usr/include/gdk-pixbuf-2.0;/usr/include/libmount;/usr/include/blkid;/usr/include/pango-1.0;/usr/include/fribidi;/usr/include/cairo;/usr/include/pixman-1;/usr/include/harfbuzz;/usr/include/glib-2.0;/usr/lib/x86_64-linux-gnu/glib-2.0/include;/usr/include/uuid;/usr/include/freetype2;/usr/include/libpng16")
set(gtk_gtk+-2.0_INCLUDES "/usr/include/gtk-2.0"
			"/usr/lib/x86_64-linux-gnu/gtk-2.0/include"
			"/usr/include/pango-1.0"
			"/usr/include/atk-1.0"
			"/usr/include/gdk-pixbuf-2.0"
			"/usr/include/libmount"
			"/usr/include/blkid"
			"/usr/include/pango-1.0"
			"/usr/include/fribidi"
			"/usr/include/cairo"
			"/usr/include/pixman-1"
			"/usr/include/harfbuzz"
			"/usr/include/glib-2.0"
			"/usr/lib/x86_64-linux-gnu/glib-2.0/include"
			"/usr/include/uuid"
			"/usr/include/freetype2"
			"/usr/include/libpng16")
set(gtk_gtk+-2.0_LIB_DIRS )
set(gtk_gtk+-2.0_RES_DIRS )
set(gtk_gtk+-2.0_DEFINITIONS )
set(gtk_gtk+-2.0_COMPILE_DEFINITIONS )
set(gtk_gtk+-2.0_COMPILE_OPTIONS_C "-pthread")
set(gtk_gtk+-2.0_COMPILE_OPTIONS_CXX "-pthread")
set(gtk_gtk+-2.0_LIBS )
set(gtk_gtk+-2.0_SYSTEM_LIBS gtk-x11-2.0 gdk-x11-2.0 pangocairo-1.0 atk-1.0 cairo gdk_pixbuf-2.0 gio-2.0 pangoft2-1.0 pango-1.0 gobject-2.0 glib-2.0 harfbuzz fontconfig freetype)
set(gtk_gtk+-2.0_FRAMEWORK_DIRS )
set(gtk_gtk+-2.0_FRAMEWORKS )
set(gtk_gtk+-2.0_BUILD_MODULES_PATHS )
set(gtk_gtk+-2.0_DEPENDENCIES )
set(gtk_gtk+-2.0_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)


########## FIND PACKAGE DEPENDENCY ##########################################################
#############################################################################################

include(CMakeFindDependencyMacro)


########## FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #######################################
#############################################################################################

########## COMPONENT gtk+-2.0 FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(gtk_gtk+-2.0_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(gtk_gtk+-2.0_FRAMEWORKS_FOUND "${gtk_gtk+-2.0_FRAMEWORKS}" "${gtk_gtk+-2.0_FRAMEWORK_DIRS}")

set(gtk_gtk+-2.0_LIB_TARGETS "")
set(gtk_gtk+-2.0_NOT_USED "")
set(gtk_gtk+-2.0_LIBS_FRAMEWORKS_DEPS ${gtk_gtk+-2.0_FRAMEWORKS_FOUND} ${gtk_gtk+-2.0_SYSTEM_LIBS} ${gtk_gtk+-2.0_DEPENDENCIES})
conan_package_library_targets("${gtk_gtk+-2.0_LIBS}"
                              "${gtk_gtk+-2.0_LIB_DIRS}"
                              "${gtk_gtk+-2.0_LIBS_FRAMEWORKS_DEPS}"
                              gtk_gtk+-2.0_NOT_USED
                              gtk_gtk+-2.0_LIB_TARGETS
                              ""
                              "gtk_gtk+-2.0")

set(gtk_gtk+-2.0_LINK_LIBS ${gtk_gtk+-2.0_LIB_TARGETS} ${gtk_gtk+-2.0_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH "/home/erico/.conan/data/gtk/system/_/_/package/cc5e5ca8b619d2dffaaeae1e4924ae3ce085a8f1/" ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH "/home/erico/.conan/data/gtk/system/_/_/package/cc5e5ca8b619d2dffaaeae1e4924ae3ce085a8f1/" ${CMAKE_PREFIX_PATH})


########## TARGETS ##########################################################################
#############################################################################################

########## COMPONENT gtk+-2.0 TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET gtk::gtk+-2.0)
        add_library(gtk::gtk+-2.0 INTERFACE IMPORTED)
        set_target_properties(gtk::gtk+-2.0 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${gtk_gtk+-2.0_INCLUDE_DIRS}")
        set_target_properties(gtk::gtk+-2.0 PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${gtk_gtk+-2.0_LIB_DIRS}")
        set_target_properties(gtk::gtk+-2.0 PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${gtk_gtk+-2.0_LINK_LIBS};${gtk_gtk+-2.0_LINKER_FLAGS_LIST}")
        set_target_properties(gtk::gtk+-2.0 PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${gtk_gtk+-2.0_COMPILE_DEFINITIONS}")
        set_target_properties(gtk::gtk+-2.0 PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${gtk_gtk+-2.0_COMPILE_OPTIONS_C};${gtk_gtk+-2.0_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## GLOBAL TARGET ####################################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    if(NOT TARGET gtk::gtk)
        add_library(gtk::gtk INTERFACE IMPORTED)
    endif()
    set_property(TARGET gtk::gtk APPEND PROPERTY
                 INTERFACE_LINK_LIBRARIES "${gtk_COMPONENTS}")
endif()

########## BUILD MODULES ####################################################################
#############################################################################################
########## COMPONENT gtk+-2.0 BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${gtk_gtk+-2.0_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
